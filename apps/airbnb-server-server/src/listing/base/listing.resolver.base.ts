/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Listing } from "./Listing";
import { ListingCountArgs } from "./ListingCountArgs";
import { ListingFindManyArgs } from "./ListingFindManyArgs";
import { ListingFindUniqueArgs } from "./ListingFindUniqueArgs";
import { CreateListingArgs } from "./CreateListingArgs";
import { UpdateListingArgs } from "./UpdateListingArgs";
import { DeleteListingArgs } from "./DeleteListingArgs";
import { Wishlist } from "../../wishlist/base/Wishlist";
import { ListingService } from "../listing.service";
@graphql.Resolver(() => Listing)
export class ListingResolverBase {
  constructor(protected readonly service: ListingService) {}

  async _listingsMeta(
    @graphql.Args() args: ListingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Listing])
  async listings(
    @graphql.Args() args: ListingFindManyArgs
  ): Promise<Listing[]> {
    return this.service.listings(args);
  }

  @graphql.Query(() => Listing, { nullable: true })
  async listing(
    @graphql.Args() args: ListingFindUniqueArgs
  ): Promise<Listing | null> {
    const result = await this.service.listing(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Listing)
  async createListing(
    @graphql.Args() args: CreateListingArgs
  ): Promise<Listing> {
    return await this.service.createListing({
      ...args,
      data: {
        ...args.data,

        listingCreatedBy: {
          connect: args.data.listingCreatedBy,
        },

        wishlists: args.data.wishlists
          ? {
              connect: args.data.wishlists,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Listing)
  async updateListing(
    @graphql.Args() args: UpdateListingArgs
  ): Promise<Listing | null> {
    try {
      return await this.service.updateListing({
        ...args,
        data: {
          ...args.data,

          listingCreatedBy: {
            connect: args.data.listingCreatedBy,
          },

          wishlists: args.data.wishlists
            ? {
                connect: args.data.wishlists,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Listing)
  async deleteListing(
    @graphql.Args() args: DeleteListingArgs
  ): Promise<Listing | null> {
    try {
      return await this.service.deleteListing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Listing], { name: "listings" })
  async findListings(
    @graphql.Parent() parent: Listing,
    @graphql.Args() args: ListingFindManyArgs
  ): Promise<Listing[]> {
    const results = await this.service.findListings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Listing, {
    nullable: true,
    name: "listingCreatedBy",
  })
  async getListingCreatedBy(
    @graphql.Parent() parent: Listing
  ): Promise<Listing | null> {
    const result = await this.service.getListingCreatedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Wishlist, {
    nullable: true,
    name: "wishlists",
  })
  async getWishlists(
    @graphql.Parent() parent: Listing
  ): Promise<Wishlist | null> {
    const result = await this.service.getWishlists(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
